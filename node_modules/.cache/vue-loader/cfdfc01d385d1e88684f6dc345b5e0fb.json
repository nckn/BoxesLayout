{"remainingRequest":"/Users/nielskonrad/Development/dev-konrad/land/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nielskonrad/Development/dev-konrad/land/src/App.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/nielskonrad/Development/dev-konrad/land/src/App.vue","mtime":1577049112393},{"path":"/Users/nielskonrad/Development/dev-konrad/land/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nielskonrad/Development/dev-konrad/land/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/nielskonrad/Development/dev-konrad/land/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/nielskonrad/Development/dev-konrad/land/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nielskonrad/Development/dev-konrad/land/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nielskonrad/Development/dev-konrad/land/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKaHRtbCwKYm9keSB7CiAgd2lkdGg6IDEwMHZ3OwogIGhlaWdodDogMTAwdmg7CiAgLy8gb3ZlcmZsb3c6IGhpZGRlbjsKfQpib2R5IHsKICBtYXJnaW46IDBweDsKfQpjYW52YXMgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQojYXBwIHsKICBoZWlnaHQ6IDEwMCU7Cn0KCiNjb250YWluZXIgewogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKfQoK"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n    <div id=\"container\"></div>\n</template>\n\n<script>\n\nimport * as THREE from 'three'\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\"\n\n// class LandObject {\n//   constructor(type) {\n//     this.type = type\n//     this.geom = null\n//     this.makeObject(this.type)\n//   }\n//   makeObject (type) {\n//     if (type === 'sphere') {\n//       THREE.Mesh.call(\n//         this, \n//         new THREE.SphereGeometry(32, 32, 32), \n//         new THREE.MeshLambertMaterial({color: 0x999999})\n//       )\n//     }\n//   }\n// }\n\n// class Sphere {\n//   constructor(size) {\n//     this.geometry = new THREE.BoxGeometry(size, size, size)\n//     this.material = new THREE.MeshNormalMaterial()\n//     this.mesh = new THREE.Mesh(this.geometry, this.material)\n//   }\n// }\n\n// Body.prototype = Object.create(THREE.Mesh.prototype);\n// Body.prototype.constructor = Body;\n// Body.prototype.setShadow = function() {\n//     this.castShadow = true;\n//     this.receiveShadow = true;\n// }\n\n// function CustomObject() {\n//   this.type = 'CustomObject';\n//   this.geometry = new THREE.BoxGeometry( 540, 540, 14 );\n//   // this.material = new THREE.MeshLambertMaterial( { color: 0xff0000 } );\n//   this.material = new THREE.MeshNormalMaterial()\n//   // THREE.Mesh.call( this, this.geometry, this.material );\n//   this.obj = new THREE.Mesh(this.geometry, this.material);\n// }\n\n// CustomObject.prototype = Object.create( THREE.Mesh.prototype );\n// CustomObject.prototype.constructor = CustomObject;\n// CustomObject.prototype.getMesh = function() {\n//   return this.mesh;\n// }\n\n// var foo = new CustomObject();\n\nexport default {\n  name: 'ThreeTest',\n  data() {\n    return {\n      camera: null,\n      scene: null,\n      renderer: null,\n      objects: [],\n      box: null,\n      plane: null\n    }\n  },\n  methods: {\n    initScene () {\n      let geometry = new THREE.BoxGeometry(0.2, 0.2, 0.2);\n      // let material = new THREE.MeshNormalMaterial();\n      var material = new THREE.MeshPhongMaterial( {\n        color: 0x999999,\n        shininess: 0,\n        specular: 0x111111\n      } );\n      var planeMaterial = new THREE.MeshPhongMaterial( {\n        color: 0xf5f5f5,\n        shininess: 0,\n        specular: 0x111111\n      } );\n      self.box = new THREE.Mesh(geometry, material);\n      self.box.position.z = 0.1\n      this.scene.add(self.box);\n\n      var planeGeometry = new THREE.PlaneBufferGeometry( 200, 200 );\n      // var matTwo = new THREE.MeshPhongMaterial( {\n      //   color: 0x999999,\n      //   shininess: 0,\n      //   specular: 0x111111\n      // } );\n      self.plane = new THREE.Mesh( planeGeometry, planeMaterial );\n      self.plane.castShadow = true;\n      self.plane.receiveShadow = true\n      self.plane.rotation.x -= Math.PI/2\n      this.scene.add(self.plane);\n      \n      // object.castShadow = true;\n      // object.receiveShadow = true;\n      // var sphere = new LandObject('sphere')\n      // var sphere = new CustomObject()\n      // this.scene.add(sphere.obj);\n      // console.log(sphere)\n      // sphere.setShadow();\n      // this.objects.push(sphere);\n      // this.scene.add(object);\n    },\n    init: function() {\n      var self = this\n      let container = document.getElementById('container');\n\n      this.camera = new THREE.PerspectiveCamera(70, container.clientWidth/container.clientHeight, 0.01, 10);\n      this.camera.position.z = 1;\n\n      this.scene = new THREE.Scene();        \n      \n      this.renderer = new THREE.WebGLRenderer({antialias: true});\n      this.renderer.setSize(container.clientWidth, container.clientHeight);\n      this.renderer.shadowMap.enabled = true\n      this.renderer.shadowMap.type = THREE.PCFSoftShadowMap\n      // this.renderer.shadowMap.renderReverseSided = true; // default is true\n      container.appendChild(this.renderer.domElement);\n\n      self.initScene()\n      self.addLights()\n      self.setupControls()\n    },\n    animate: function() {\n      requestAnimationFrame(this.animate);\n      // this.mesh.rotation.x += 0.01;\n      // self.box.rotation.y += 0.02;\n      this.spotLight.rotation.x += 0.01;\n      this.spotLight.rotation.y += 0.02;\n      this.renderer.render(this.scene, this.camera);\n    },\n    addLights () {\n      var self = this\n      // Directional light\n      self.dirLight = new THREE.DirectionalLight(0xffffff);\n      self.dirLight.position.set(0,5,5);\n      self.dirLight.target.position.set(0,0,0);\n      self.dirLight.shadow.camera.near = 0.1;       \n      self.dirLight.shadow.camera.far = 1000;      \n      self.dirLight.shadow.camera.left = -15;\n      self.dirLight.shadow.camera.bottom = -15;\n      self.dirLight.shadow.camera.right = 15;\n      self.dirLight.shadow.camera.top\t= 15;\n      self.dirLight.castShadow = true;\n      self.dirLight.shadow.mapSize.width = 2048;\n      self.dirLight.shadow.mapSize.height = 2048;\n      self.scene.add(self.dirLight);\n      // Spot light\n      self.spotLight = new THREE.SpotLight( 0x888888 );\n      self.spotLight.name = 'Spot Light';\n      self.spotLight.angle = Math.PI / 5;\n      self.spotLight.penumbra = 0.3;\n      self.spotLight.position.set( 8, 10, 5 );\n      self.spotLight.castShadow = true;\n      self.spotLight.shadow.camera.near = 8;\n      self.spotLight.shadow.camera.far = 200;\n      self.spotLight.shadow.mapSize.width = 256;\n      self.spotLight.shadow.mapSize.height = 256;\n      self.spotLight.shadow.bias = -0.002;\n      self.spotLight.shadow.radius = 4;\n      self.scene.add( self.spotLight );\n    },\n    setupControls () {\n      var self = this\n      self.controls = new OrbitControls( self.camera, self.renderer.domElement );\n      // self.controls.target.set( self.mesh );\n      // self.controls.target.set( 0, 0, 0 );\n      // self.controls.update()\n    }\n  },\n  mounted() {\n      this.init();\n      this.animate();\n  }\n}\n</script>\n\n<style lang=\"scss\">\n\nhtml,\nbody {\n  width: 100vw;\n  height: 100vh;\n  // overflow: hidden;\n}\nbody {\n  margin: 0px;\n}\ncanvas {\n  position: relative;\n}\n#app {\n  height: 100%;\n}\n\n#container {\n  width: 100%;\n  height: 100%;\n}\n\n</style>"]}]}