{"remainingRequest":"/Users/nielskonrad/Development/dev-konrad/land/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nielskonrad/Development/dev-konrad/land/src/components/SoundLand.vue?vue&type=style&index=0&id=3d3d6acc&scoped=true&lang=css&","dependencies":[{"path":"/Users/nielskonrad/Development/dev-konrad/land/src/components/SoundLand.vue","mtime":1577033185119},{"path":"/Users/nielskonrad/Development/dev-konrad/land/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nielskonrad/Development/dev-konrad/land/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/nielskonrad/Development/dev-konrad/land/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/nielskonrad/Development/dev-konrad/land/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nielskonrad/Development/dev-konrad/land/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5tYWluLXZpZXcgewogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKfQo="},{"version":3,"sources":["SoundLand.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiMA;AACA;AACA;AACA","file":"SoundLand.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"pug\">\n    .main-view\n</template>\n\n<script>\n\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\"\n// import { TrackballControls } from \"three-full\";\n// import Stats from 'three/examples/jsm/libs/stats.module.js'\n// import { NormalMapShader } from \"three/examples/jsm/shaders/NormalMapShader\"\n// import { TerrainShader } from \"three/examples/jsm/shaders/TerrainShader\"\n// import { BufferGeometryUtils } from \"three/examples/jsm/utils/BufferGeometryUtils\"\n\nconst SCREEN_WIDTH = window.innerWidth;\nconst SCREEN_HEIGHT = window.innerHeight;\n\nexport default {\n  name: 'SoundLand',\n  data() {\n    return {\n      camera: null,\n      scene: null,\n      renderer: null,\n      mesh: null,\n      controls: null,\n      plane: null,\n      torusKnot: null,\n      dirLight: null,\n      spotLight: null,\n      dirGroup: null,\n      clock: null,\n      // stats: null\n    };\n  },\n  mounted() {\n    this.init()\n    // this.render()\n    this.animate()\n    // this.cameraControls()\n    console.log(OrbitControls)\n  },\n  methods: {\n    init: function() {\n      var self = this\n      self.initScene()\n      self.initMisc()\n      // document.body.appendChild( self.renderer.domElement )\n      // Resizing\n      window.addEventListener( 'resize', self.onWindowResize, false )\n      \n      let container = this.$el\n      // this.camera = new THREE.PerspectiveCamera(70, container.clientWidth / container.clientHeight, 0.01, 10)\n      // this.camera.position.z = 1\n      // self.scene = new THREE.Scene()\n      // self.scene.background = new THREE.Color(0xcccccc)\n      // self.scene.fog = new THREE.FogExp2(0xcccccc, 0.002)\n\n      // this.makeObjects()\n      // this.setupLights()\n\n      self.renderer = new THREE.WebGLRenderer({ antialias: true });\n      self.renderer.setSize(container.clientWidth, container.clientHeight);\n      container.appendChild(this.renderer.domElement);\n    },\n    onWindowResize() {\n      var self = this\n      console.log('yeas')\n      self.camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;\n      self.camera.updateProjectionMatrix();\n      self.renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );\n    },\n    animate() {\n      var self = this\n      self.render();\n      requestAnimationFrame( self.animate );\n      // this.stats.update();\n    },\n    render() {\n      var self = this\n      var delta = self.clock.getDelta();\n      var time = self.clock.elapsedTime;\n      self.renderer.render( self.scene, self.camera );\n      // console.log(time + delta)\n      self.torusKnot.rotation.x += 0.25 * delta;\n      self.torusKnot.rotation.y += 2 * delta;\n      self.torusKnot.rotation.z += 1 * delta;\n      self.dirGroup.rotation.y += 0.7 * delta;\n      self.dirLight.position.z = 17 + Math.sin(time*0.001)*5;\n    },\n    initScene () {\n      var self = this\n      self.camera = new THREE.PerspectiveCamera( 45, SCREEN_WIDTH / SCREEN_HEIGHT, 1, 1000 );\n      self.camera.position.set( 0, 10, 30 );\n      self.scene = new THREE.Scene();\n      self.scene.fog = new THREE.Fog( 0xCCCCCC, 50, 100 )\n      // Lights\n      self.scene.add( new THREE.AmbientLight( 0x444444 ) );\n      self.spotLight = new THREE.SpotLight( 0x888888 );\n      self.spotLight.name = 'Spot Light';\n      self.spotLight.angle = Math.PI / 5;\n      self.spotLight.penumbra = 0.3;\n      self.spotLight.position.set( 8, 10, 5 );\n      self.spotLight.castShadow = true;\n      self.spotLight.shadow.camera.near = 8;\n      self.spotLight.shadow.camera.far = 200;\n      self.spotLight.shadow.mapSize.width = 256;\n      self.spotLight.shadow.mapSize.height = 256;\n      self.spotLight.shadow.bias = -0.002;\n      self.spotLight.shadow.radius = 4;\n      self.scene.add( self.spotLight );\n      self.dirLight = new THREE.DirectionalLight( 0xFFFFFF, 1 );\n      self.dirLight.name = 'Dir. Light';\n      self.dirLight.position.set( 3, 12, 17 );\n      self.dirLight.castShadow = true;\n      self.dirLight.shadow.camera.near = 0.1;\n      self.dirLight.shadow.camera.far = 500;\n      self.dirLight.shadow.camera.right = 17;\n      self.dirLight.shadow.camera.left = - 17;\n      self.dirLight.shadow.camera.top\t= 17;\n      self.dirLight.shadow.camera.bottom = - 17;\n      self.dirLight.shadow.mapSize.width = 512;\n      self.dirLight.shadow.mapSize.height = 512;\n      self.dirLight.shadow.radius = 4;\n      self.dirLight.shadow.bias = -0.0005;\n      self.scene.add( self.dirLight );\n      self.dirGroup = new THREE.Group();\n      self.dirGroup.add( self.dirLight );\n      self.scene.add( self.dirGroup );\n      // Geometry\n      var geometry = new THREE.TorusKnotBufferGeometry( 25, 8, 75, 20 );\n      var material = new THREE.MeshPhongMaterial( {\n        color: 0x999999,\n        shininess: 0,\n        specular: 0x222222\n      } );\n      self.torusKnot = new THREE.Mesh( geometry, material );\n      self.torusKnot.scale.multiplyScalar( 1 / 18 );\n      self.torusKnot.position.y = 3;\n      self.torusKnot.castShadow = true;\n      self.torusKnot.receiveShadow = true;\n      self.scene.add( self.torusKnot );\n      var geometryTwo = new THREE.CylinderBufferGeometry( 0.75, 0.75, 7, 32 );\n      var pillar1 = new THREE.Mesh( geometryTwo, material );\n      pillar1.position.set( 10, 3.5, 10 );\n      pillar1.castShadow = true;\n      pillar1.receiveShadow = true;\n      var pillar2 = pillar1.clone();\n      pillar2.position.set( 10, 3.5, -10 );\n      var pillar3 = pillar1.clone();\n      pillar3.position.set( -10, 3.5, 10 );\n      var pillar4 = pillar1.clone();\n      pillar4.position.set( -10, 3.5, -10 );\n      self.scene.add( pillar1 );\n      self.scene.add( pillar2 );\n      self.scene.add( pillar3 );\n      self.scene.add( pillar4 );\n      var geometryThr = new THREE.PlaneBufferGeometry( 200, 200 );\n      var matTwo = new THREE.MeshPhongMaterial( {\n        color: 0x999999,\n        shininess: 0,\n        specular: 0x111111\n      } );\n      var ground = new THREE.Mesh( geometryThr, matTwo );\n      ground.rotation.x = -Math.PI/2;\n      ground.scale.multiplyScalar( 3 );\n      ground.castShadow = true;\n      ground.receiveShadow = true;\n      self.scene.add( ground );\n    },\n    initMisc () {\n      var self = this\n      self.renderer = new THREE.WebGLRenderer( { antialias: true } );\n      self.renderer.setPixelRatio( window.devicePixelRatio );\n      self.renderer.setSize( window.innerWidth, window.innerHeight );\n      self.renderer.shadowMap.enabled = true;\n      self.renderer.shadowMap.type = THREE.VSMShadowMap;\t\t\n      self.renderer.setClearColor( 0xCCCCCC, 1 );\n      // Mouse control\n      console.log('insiiiiiiiiiiiiiiiiiide')\n      self.controls = new OrbitControls( self.camera, self.renderer.domElement );\n      // self.controls.target.set( self.mesh );\n      self.controls.target.set( 0, 0, 0 );\n      self.controls.update()\n      self.clock = new THREE.Clock();\n      // self.stats = new Stats();\n      // self.document.body.appendChild( self.stats.dom );\n    }\n  }\n}\n</script>\n\n<style scoped>\n.main-view {\n  width: 100%;\n  height: 100%;\n}\n</style>\n"]}]}